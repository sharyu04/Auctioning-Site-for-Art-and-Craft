// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/repository"

	uuid "github.com/google/uuid"
)

// ArtworkStorer is an autogenerated mock type for the ArtworkStorer type
type ArtworkStorer struct {
	mock.Mock
}

// CreateArtwork provides a mock function with given fields: artwork
func (_m *ArtworkStorer) CreateArtwork(artwork repository.Artworks) (repository.Artworks, error) {
	ret := _m.Called(artwork)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtwork")
	}

	var r0 repository.Artworks
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Artworks) (repository.Artworks, error)); ok {
		return rf(artwork)
	}
	if rf, ok := ret.Get(0).(func(repository.Artworks) repository.Artworks); ok {
		r0 = rf(artwork)
	} else {
		r0 = ret.Get(0).(repository.Artworks)
	}

	if rf, ok := ret.Get(1).(func(repository.Artworks) error); ok {
		r1 = rf(artwork)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArtworkById provides a mock function with given fields: artworkId, ownerId, role
func (_m *ArtworkStorer) DeleteArtworkById(artworkId uuid.UUID, ownerId uuid.UUID, role string) error {
	ret := _m.Called(artworkId, ownerId, role)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtworkById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, string) error); ok {
		r0 = rf(artworkId, ownerId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllArtworks provides a mock function with given fields: start, count
func (_m *ArtworkStorer) GetAllArtworks(start int, count int) ([]dto.GetArtworkResponse, error) {
	ret := _m.Called(start, count)

	if len(ret) == 0 {
		panic("no return value specified for GetAllArtworks")
	}

	var r0 []dto.GetArtworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]dto.GetArtworkResponse, error)); ok {
		return rf(start, count)
	}
	if rf, ok := ret.Get(0).(func(int, int) []dto.GetArtworkResponse); ok {
		r0 = rf(start, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GetArtworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(start, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtworkById provides a mock function with given fields: artworkId
func (_m *ArtworkStorer) GetArtworkById(artworkId uuid.UUID) (dto.GetArtworkResponse, error) {
	ret := _m.Called(artworkId)

	if len(ret) == 0 {
		panic("no return value specified for GetArtworkById")
	}

	var r0 dto.GetArtworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (dto.GetArtworkResponse, error)); ok {
		return rf(artworkId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) dto.GetArtworkResponse); ok {
		r0 = rf(artworkId)
	} else {
		r0 = ret.Get(0).(dto.GetArtworkResponse)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(artworkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields: categoryName
func (_m *ArtworkStorer) GetCategory(categoryName string) (repository.Category, error) {
	ret := _m.Called(categoryName)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 repository.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Category, error)); ok {
		return rf(categoryName)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Category); ok {
		r0 = rf(categoryName)
	} else {
		r0 = ret.Get(0).(repository.Category)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(categoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilterArtworks provides a mock function with given fields: category, start, count
func (_m *ArtworkStorer) GetFilterArtworks(category string, start int, count int) ([]dto.GetArtworkResponse, error) {
	ret := _m.Called(category, start, count)

	if len(ret) == 0 {
		panic("no return value specified for GetFilterArtworks")
	}

	var r0 []dto.GetArtworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]dto.GetArtworkResponse, error)); ok {
		return rf(category, start, count)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []dto.GetArtworkResponse); ok {
		r0 = rf(category, start, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GetArtworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(category, start, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArtworkStorer creates a new instance of ArtworkStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtworkStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtworkStorer {
	mock := &ArtworkStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
