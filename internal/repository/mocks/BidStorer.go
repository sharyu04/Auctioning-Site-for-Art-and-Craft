// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/repository"
)

// BidStorer is an autogenerated mock type for the BidStorer type
type BidStorer struct {
	mock.Mock
}

// CreateBid provides a mock function with given fields: bid
func (_m *BidStorer) CreateBid(bid repository.Bids) (repository.Bids, error) {
	ret := _m.Called(bid)

	if len(ret) == 0 {
		panic("no return value specified for CreateBid")
	}

	var r0 repository.Bids
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Bids) (repository.Bids, error)); ok {
		return rf(bid)
	}
	if rf, ok := ret.Get(0).(func(repository.Bids) repository.Bids); ok {
		r0 = rf(bid)
	} else {
		r0 = ret.Get(0).(repository.Bids)
	}

	if rf, ok := ret.Get(1).(func(repository.Bids) error); ok {
		r1 = rf(bid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBidStatus provides a mock function with given fields: bidStatusName
func (_m *BidStorer) GetBidStatus(bidStatusName string) (repository.BidStatus, error) {
	ret := _m.Called(bidStatusName)

	if len(ret) == 0 {
		panic("no return value specified for GetBidStatus")
	}

	var r0 repository.BidStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.BidStatus, error)); ok {
		return rf(bidStatusName)
	}
	if rf, ok := ret.Get(0).(func(string) repository.BidStatus); ok {
		r0 = rf(bidStatusName)
	} else {
		r0 = ret.Get(0).(repository.BidStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bidStatusName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHighestBid provides a mock function with given fields: artWorkId
func (_m *BidStorer) GetHighestBid(artWorkId string) (float64, float64, error) {
	ret := _m.Called(artWorkId)

	if len(ret) == 0 {
		panic("no return value specified for GetHighestBid")
	}

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (float64, float64, error)); ok {
		return rf(artWorkId)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(artWorkId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) float64); ok {
		r1 = rf(artWorkId)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(artWorkId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBid provides a mock function with given fields: bid, bidder_id
func (_m *BidStorer) UpdateBid(bid dto.UpdateBidRequest, bidder_id string) (repository.Bids, error) {
	ret := _m.Called(bid, bidder_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBid")
	}

	var r0 repository.Bids
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UpdateBidRequest, string) (repository.Bids, error)); ok {
		return rf(bid, bidder_id)
	}
	if rf, ok := ret.Get(0).(func(dto.UpdateBidRequest, string) repository.Bids); ok {
		r0 = rf(bid, bidder_id)
	} else {
		r0 = ret.Get(0).(repository.Bids)
	}

	if rf, ok := ret.Get(1).(func(dto.UpdateBidRequest, string) error); ok {
		r1 = rf(bid, bidder_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBidStorer creates a new instance of BidStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBidStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BidStorer {
	mock := &BidStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
