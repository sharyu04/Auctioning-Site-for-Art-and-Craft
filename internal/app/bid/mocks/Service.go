// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/repository"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateBid provides a mock function with given fields: bidDetails
func (_m *Service) CreateBid(bidDetails dto.CreateBidRequest) (repository.Bids, error) {
	ret := _m.Called(bidDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateBid")
	}

	var r0 repository.Bids
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateBidRequest) (repository.Bids, error)); ok {
		return rf(bidDetails)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateBidRequest) repository.Bids); ok {
		r0 = rf(bidDetails)
	} else {
		r0 = ret.Get(0).(repository.Bids)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateBidRequest) error); ok {
		r1 = rf(bidDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBid provides a mock function with given fields: updateRequest, bidder_id
func (_m *Service) UpdateBid(updateRequest dto.UpdateBidRequest, bidder_id string) (repository.Bids, error) {
	ret := _m.Called(updateRequest, bidder_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBid")
	}

	var r0 repository.Bids
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UpdateBidRequest, string) (repository.Bids, error)); ok {
		return rf(updateRequest, bidder_id)
	}
	if rf, ok := ret.Get(0).(func(dto.UpdateBidRequest, string) repository.Bids); ok {
		r0 = rf(updateRequest, bidder_id)
	} else {
		r0 = ret.Get(0).(repository.Bids)
	}

	if rf, ok := ret.Get(1).(func(dto.UpdateBidRequest, string) error); ok {
		r1 = rf(updateRequest, bidder_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
