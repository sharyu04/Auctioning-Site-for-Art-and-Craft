// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/repository"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateArtwork provides a mock function with given fields: artworkDetails
func (_m *Service) CreateArtwork(artworkDetails dto.CreateArtworkRequest) (repository.Artworks, error) {
	ret := _m.Called(artworkDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtwork")
	}

	var r0 repository.Artworks
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateArtworkRequest) (repository.Artworks, error)); ok {
		return rf(artworkDetails)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateArtworkRequest) repository.Artworks); ok {
		r0 = rf(artworkDetails)
	} else {
		r0 = ret.Get(0).(repository.Artworks)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateArtworkRequest) error); ok {
		r1 = rf(artworkDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArtworkById provides a mock function with given fields: id, owner_id, role
func (_m *Service) DeleteArtworkById(id string, owner_id string, role string) error {
	ret := _m.Called(id, owner_id, role)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtworkById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, owner_id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArtworkByID provides a mock function with given fields: id
func (_m *Service) GetArtworkByID(id string) (dto.GetArtworkResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetArtworkByID")
	}

	var r0 dto.GetArtworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.GetArtworkResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) dto.GetArtworkResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.GetArtworkResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtworks provides a mock function with given fields: category, start, count
func (_m *Service) GetArtworks(category string, start int, count int) ([]dto.GetArtworkResponse, error) {
	ret := _m.Called(category, start, count)

	if len(ret) == 0 {
		panic("no return value specified for GetArtworks")
	}

	var r0 []dto.GetArtworkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]dto.GetArtworkResponse, error)); ok {
		return rf(category, start, count)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []dto.GetArtworkResponse); ok {
		r0 = rf(category, start, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GetArtworkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(category, start, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
