// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/sharyu04/Auctioning-Site-for-Art-and-Craft/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: userDetails, role
func (_m *Service) CreateUser(userDetails dto.CreateUserRequest, role string) (dto.UserSignupResponse, error) {
	ret := _m.Called(userDetails, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 dto.UserSignupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateUserRequest, string) (dto.UserSignupResponse, error)); ok {
		return rf(userDetails, role)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateUserRequest, string) dto.UserSignupResponse); ok {
		r0 = rf(userDetails, role)
	} else {
		r0 = ret.Get(0).(dto.UserSignupResponse)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateUserRequest, string) error); ok {
		r1 = rf(userDetails, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: start, count, role
func (_m *Service) GetAllUsers(start int, count int, role string) ([]dto.GetAllUserResponse, error) {
	ret := _m.Called(start, count, role)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []dto.GetAllUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]dto.GetAllUserResponse, error)); ok {
		return rf(start, count, role)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []dto.GetAllUserResponse); ok {
		r0 = rf(start, count, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GetAllUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(start, count, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: credentials
func (_m *Service) LoginUser(credentials dto.LoginRequest) (string, error) {
	ret := _m.Called(credentials)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.LoginRequest) (string, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(dto.LoginRequest) string); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.LoginRequest) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
